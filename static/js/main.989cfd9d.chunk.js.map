{"version":3,"sources":["components/Table.js","utils/projects.js","utils/API.js","components/DashBoard/DashBoard.js","App.js","serviceWorker.js","index.js"],"names":["Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","projects","id","platform","type","year","keywords","descriptions","media","github","content","Dashboard","props","state","project_data","Promise","all","API","firstResponse","this","setState","project_columns","Header","accessor","console","log","className","href","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.989cfd9d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useTable } from 'react-table'\r\n\r\nexport function Table({ columns, data }) {\r\n// Use the state and functions returned from useTable to build your UI\r\nconst {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n} = useTable({\r\n    columns,\r\n    data,\r\n})\r\n\r\n// Render the UI for your table\r\nreturn (\r\n    <table {...getTableProps()}>\r\n    <thead>\r\n        {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n            ))}\r\n        </tr>\r\n        ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, i) => {\r\n        prepareRow(row)\r\n        return (\r\n            <tr {...row.getRowProps()}>\r\n            {row.cells.map(cell => {\r\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n            })}\r\n            </tr>\r\n        )\r\n        })}\r\n    </tbody>\r\n    </table>\r\n)\r\n}","\r\nconst projects = [\r\n    {\r\n        id: \"Trayinia\",\r\n        platform: \"PC\",\r\n        type: \"Game\",\r\n        year: \"2017\",\r\n        keywords: [\"Unity 3D\", \"C#\", \"Arcade\"],\r\n        descriptions: [\"Trayinia is a two player cooperative arcade game \",\r\n            \"Designed to be played on arcadia's(a UTC student game making association) arcade machine \",\r\n            \"Players have to cooperate to reach a maximun high score \",\r\n            \"and then turn on each other to absorb the score for himself \"],\r\n        media: [],\r\n        github: \"private\"\r\n    },\r\n    {\r\n        id: \"Air Hockey\",\r\n        platform: \"PC\",\r\n        type: \"Game\",\r\n        year: \"2017\",\r\n        keywords: [\"Unity 3D\", \"C#\", \"Mixte Reality\", \"Realtime Image Processing\", \"Motion Capture \"],\r\n        descriptions: [\"Air Hockey is a reality mixte hockey game \",\r\n            \"Real objects will be detected by a web cam \",\r\n            \"A image processing algorithm will calculate and project player's avatar in virtual space \",\r\n            \"so players can 'hit' the virtual ball with their real hand xD \"],\r\n        media: [\r\n            {\r\n                type: \"video\",\r\n                content: \"../../public/ressources/AirHockey_reborn.mp4\"\r\n            }\r\n        ],\r\n        github: \"private\"\r\n    },\r\n    {\r\n        id: \"Colorant\",\r\n        platform: \"Web/Mobile\",\r\n        type: \"Game\",\r\n        year: \"2018\",\r\n        keywords: [\"Java\", \"Javascript\", \"Multi Agents\", \"Simulation\", \"Mobile as controller \"],\r\n        descriptions: [\"Colorant is a collaborative drawing and simulation game \",\r\n            \"by using web sockets, and a Server backed with Java EE \",\r\n            \"Players can draw on a single screen together with their phone as controller \"],\r\n        media: [\r\n            {\r\n                type: \"image\",\r\n                content: \"../../public/ressources/AirHockey_reborn.mp4\"\r\n            },\r\n            {\r\n                type: \"web\",\r\n                content: \"D:/MyProjets/Javascripts/PersonalPage/ReactPersonalPage/public/ressources/colorant_presentation/presentation.html\"\r\n            }\r\n        ],\r\n        github:\"private\"\r\n    },\r\n    {\r\n        id: \"Agir\",\r\n        platform: \"Cross Platform Mobile\",\r\n        type: \"Game\",\r\n        year: \"2016\",\r\n        keywords: [\"Ionic2\", \"Typescript\"],\r\n        descriptions: [\"Agir 'Do it' offers 4 interactive experiences \",\r\n            \"adapt, rock, light up, and forget \",\r\n            \"Each scene comes as an answer to contemporary injunctions \",\r\n            \"being flexible, dynamic and mobile, finding one's way, forgetting in order to move forward... \"\r\n        ],\r\n        media: [\r\n            {\r\n                type: \"google_link\",\r\n                content: \"https://play.google.com/store/apps/details?id=com.tx.agir\"\r\n            },\r\n            {\r\n                type: \"apple_link\",\r\n                content: \"https://appsto.re/cn/WDN8fb.i\"\r\n            }\r\n        ],\r\n        github:\"private\"\r\n    },\r\n    {\r\n        id: \"Selenuim-auto-web\",\r\n        platform: \"Desktop-Windows\",\r\n        type: \"App\",\r\n        year: \"2020\",\r\n        keywords: [\"JavaFx\", \"Selenium\"],\r\n        descriptions: [\"A simple Gui to configure actions to execute automaticly on web \",\r\n            \"Including navigate, fill, click and select\",\r\n            \"Can save and load configuration from file\",\r\n            \"being flexible, dynamic and mobile, finding one's way, forgetting in order to move forward...\"\r\n        ],\r\n        media: [],\r\n        github:\"https://github.com/linxuhao/Selenuim-auto-web\"\r\n    },\r\n];\r\nexport default projects;","import axios from \"axios\";\r\nimport projects from \"../utils/projects\"\r\n\r\nconst headers = {\r\n  \"Content-Type\": \"application/json\"\r\n};\r\nconst burl = \"https://us-central1-personalpagedb.cloudfunctions.net\";\r\n\r\nexport default {\r\n  \r\n  /*getComments: function(){\r\n    return axios.get(`${burl}/getComments`, {}, { headers: headers });\r\n  },\r\n  addComment: function(comment){\r\n    return axios.post(`${burl}/addComment`, {comment}, { headers: headers });\r\n  }\r\n\r\n  getProjects: function(){\r\n    return axios.get(`${burl}/getProjects`, {}, { headers: headers });\r\n  }*/\r\n\r\n  getProjects: function(){\r\n    return projects;\r\n  }\r\n\r\n};","import React from \"react\";\r\nimport { Table } from '../Table'\r\nimport API from \"../../utils/API\";\r\n\r\nexport class Dashboard extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        project_data : [],\r\n      };\r\n    }\r\n\r\n  async componentWillMount () {\r\n    var project_data;\r\n    const [firstResponse] = await Promise.all([\r\n      API.getProjects()\r\n    ]);\r\n    project_data = firstResponse;\r\n    this.setState({\r\n      project_data : project_data,\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    const project_columns = [\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'id' // String-based value accessors!\r\n      },\r\n      {\r\n        Header: 'Platform',\r\n        accessor: 'platform' // String-based value accessors!\r\n      },\r\n      {\r\n        Header: 'Type',\r\n        accessor: 'type' // String-based value accessors!\r\n      },\r\n      {\r\n        Header: 'Year',\r\n        accessor: 'year' // String-based value accessors!\r\n      },\r\n      {\r\n        Header: 'keywords',\r\n        accessor: 'keywords' // String-based value accessors!\r\n      },\r\n      {\r\n        Header: 'Descriptions',\r\n        accessor: 'descriptions' // String-based value accessors!\r\n      },\r\n      {\r\n        Header: 'Github',\r\n        accessor: 'github' // String-based value accessors!\r\n      }\r\n    ];\r\n    console.log(this.state)\r\n    console.log(project_columns)\r\n    return (\r\n      <div className=\"Dashboard\">\r\n        <h1>Dashboard</h1>\r\n        <a href=\"https://github.com/linxuhao/linxuhao.github.io\">Github</a>\r\n        <Table\r\n          data={this.state.project_data}\r\n          columns={project_columns}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Dashboard } from \"./components/DashBoard/DashBoard.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <div className=\"App-content\">\n            <Dashboard />\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}